!!! Strict
%html{lang: 'en', xmllang: 'en', xmlns: 'http://www.w3.org/1999/xhtml'}
  %head
    %title ...
    %link{href: 'http://rking.sharpsaw.org/resume/stylesheets/screen.css', media: 'screen, projection', rel: 'stylesheet'}/
    %link{href: 'http://rking.sharpsaw.org/resume/stylesheets/print.css', media: 'print', rel: 'stylesheet'}/
  %meta{content: 'text/html; charset=UTF-8', 'http-equiv' => 'Content-Type'}/
  %body
    %h1 Sharpened to a Fine Point

Do you you have a "github.com/[you]/config" repo?
%ul
  %li If not: let me sell you on the idea.
  %li If so: read on.

%h2 History

At SocialText, we had a common set of dotfiles and scripts that helped make
pair programming more consistent. Instead of the usual friction while pairing,
where the host of the session had all the configs/scripts tuned how they want
and the guest being only able to wish the same was true for them, we converged
on a set of "pairsonalizations" that worked for the whole group.

Ingy d√∂t Net generalized the idea and made
%a(href='https://gitub.com/ingydotnet/...') ... (DotDotDot)

There are several levels you can opt-in, and each one is pretty simple:

%h2 Checkpoint 1 - Personal Config Symlinker

If you do the "config" repo thing, probably have an ad-hoc script to symlink
those files into your home dir, and maybe a script to pull or commit/push those
configs. At its essence, ... is a tool to do this for you.

%pre
  git_user=$USER # or whatever it is for you
  repo=${git_user}-dots # This is the ... custom, though 'config' is more common
  cd # currently ... only works in $HOME
  git clone https://gitub.com/ingydotnet/...
  conf=~/.../conf
  echo install_method: symlink &gt; $conf # my pref, tho ingy prefers hardlinks
  echo dot_paths: &gt; $conf
  echo "- repo: https://github.com/$git_user/$repo" &gt; $conf
  \... upgrade

After that command runs, it should download that repo to ~/.../src/[reponame] and symlink any `bin/` contents to `~/bin` and any dotfiles to $HOME

%h2 Checkpoint 2 - Buddy Mode

One use case we considered at every stage of ... design/implementation was pair
programming. Here's an examlpe of adding a guest config:

%pre
  echo '- repo: https://github.com/homebro/config' &gt;&gt; ~/.../conf
  \... upgrade

That's pretty much it!

Note that these have a specific set of rules for "merging" the symlinks: Whichever repo is first in the list

%h2 Checkpoint 3 - Private Repos

%pre
  Code: TODO

Just because it is easy to use public repos does not mean that everything must be public.

Simply add a URL for a host that only you can reach

%pre
  ssh otherhost git init --bare
  \# TODO

%h2 Checkpoint 4 - Sharpsaw Setup

Full on social configuration

Key ideas include
%ul
  %li organizing repos according to reasonable boundaries.
  %li aggressive and conservative configuration, mixed and matched
  %li concensus and exploration
  %li Constant improvement


%h2 TODO

%ul
  %li Mention ...@
  %li Mention ...each
  %li Time to update vs super_upgrade_install
  %li IRC channel - irc.freenode.net/#sharpsaw

